buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}


allprojects {
    group = 'org.jvalue.commons'
    version = '0.2.1'
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8

    // default maven repo
    repositories {
        jcenter()
    }

    // gradle wrapper
    task wrapper(type: Wrapper) {
        gradleVersion = '4.4'
    }

    // show java compiler warnings
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

    // integration test
    def testSrcDir = file('src/integrationtest/java')
    def testResourceDir = file('src/integrationtest/resources')
    sourceSets {
        integrationTest {
            java.srcDir testSrcDir
            resources.srcDir testResourceDir
            compileClasspath = sourceSets.main.output + configurations.testCompile + sourceSets.test.output
            runtimeClasspath = output + compileClasspath
        }
    }
    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }
    //check.dependsOn integrationTest

    // publishing to nexus
    publishing {
        if (!project.ext.has('nexusUsername')) {
            project.ext.nexusUsername = ''
        }
        if (!project.ext.has('nexusPassword')) {
            project.ext.nexusPassword = ''
        }
        publications {
            nexusJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
        repositories {
            maven {
                url 'https://mojo-maven.cs.fau.de/repository/public-releases/'
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

}
