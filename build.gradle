buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}


allprojects {
    group = 'org.jvalue.commons'
    version = '0.3.0'
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8

    // default maven repo
    repositories {
        jcenter()
    }

    // gradle wrapper
    task wrapper(type: Wrapper) {
        gradleVersion = '4.10.2'
    }

    // show java compiler warnings
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

	test {
		// required by jmockit
		jvmArgs += '-Djdk.attach.allowAttachSelf'

		testLogging {
			events "passed", "skipped", "failed"

			afterSuite { desc, result ->
				if (!desc.parent) {
					println "Tests run: ${result.testCount}, " +
						"Failures: ${result.failedTestCount}, " +
						"Skipped: ${result.skippedTestCount}"
				}
			}
		}
	}

	javadoc {
		options.addStringOption('encoding', 'UTF-8')

		if (!JavaVersion.current().isJava8()) {
			options.addBooleanOption('html5', true)
		}
	}

    // integration test
    def testSrcDir = file('src/integrationtest/java')
    def testResourceDir = file('src/integrationtest/resources')
    sourceSets {
        integrationTest {
            java.srcDir testSrcDir
            resources.srcDir testResourceDir
            compileClasspath = sourceSets.main.output + configurations.testCompile + sourceSets.test.output
            runtimeClasspath = output + compileClasspath
        }
    }
    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }
    check.dependsOn integrationTest

    // publishing to GitLab
    publishing {
        publications {
            nexusJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
			maven {
				name = 'GitLab'
				url = 'https://gitlab.com/api/v4/projects/12889679/packages/maven'
				credentials(HttpHeaderCredentials) {
					name = "Job-Token"
					value = System.getenv("CI_JOB_TOKEN")
				}
				authentication {
					header(HttpHeaderAuthentication)
				}
			}
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

}
